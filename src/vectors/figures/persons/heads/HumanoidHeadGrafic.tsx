import { Ellipse, Group, Path, Rect, Shape } from "react-konva";
import { ScaleableGroupLite } from "../../../ScaleableGroupLite";
import {
  humanHead,
  humanHeadType,
} from "../../../../data/figures/persons/humanoidHeadData";
import {
  GetHasBorderColor,
  GetHasBorderThickness,
} from "../../../../data/baseInterfaces/IHasBorder";

const headBaseOffset = {
  x: 500,
  y: 500,
};

export interface HumanoidHeadGraficProps {
  item: humanHead | undefined;
}

export function HumanoidHeadGrafic(props: HumanoidHeadGraficProps) {
  return (
    <ScaleableGroupLite item={props.item}>
      <Group offsetX={headBaseOffset.x / 2} offsetY={headBaseOffset.y}>
        <SimpleHumanoidHeadOutline item={props.item} />
      </Group>
    </ScaleableGroupLite>
  );
}

function SimpleHumanoidHeadOutline(props: HumanoidHeadGraficProps) {
  function getSvgPath(): string {
    switch (props.item!.headType) {
      case humanHeadType.sharp:
        return "M423.25,209.62 C423.33,208.79 424.71,187.20 424.81,181.43 C424.95,173.03 423.98,156.50 423.31,148.48 C422.16,137.27 420.00,123.01 418.46,116.53 C416.83,109.75 411.54,94.72 408.69,88.88 C405.50,82.41 396.82,69.75 391.57,63.83 C386.74,58.42 374.69,46.89 368.68,41.96 C362.26,36.72 348.47,27.54 341.82,24.17 C334.41,20.44 320.73,15.29 311.46,12.71 C304.00,10.76 288.10,7.23 282.00,6.44 C272.39,5.21 251.40,5.28 250.46,5.28 C245.17,5.27 230.04,5.21 222.92,5.90 C215.38,6.65 201.04,9.54 192.30,11.70 C181.52,14.65 169.31,18.88 161.92,22.37 C154.65,25.83 141.12,34.35 134.64,39.38 C128.58,44.12 116.03,55.69 110.97,61.12 C105.33,67.21 96.59,79.14 93.06,85.65 C90.00,91.37 84.64,105.42 82.58,112.85 C80.86,119.09 78.19,134.69 77.16,144.06 C76.40,152.24 75.22,170.81 75.22,176.14 C75.30,185.63 76.19,200.89 76.61,207.50 C76.69,209.09 78.68,224.43 79.56,231.25 C81.37,244.43 88.67,273.27 94.85,294.70 C99.02,310.74 106.08,343.29 109.34,359.58 C110.91,366.90 114.55,382.32 117.28,390.57 C118.77,395.06 126.17,413.01 127.94,416.27 C130.45,420.85 136.45,427.54 144.82,436.24 C150.88,442.51 162.71,451.62 169.93,456.13 C188.40,467.60 233.58,489.21 238.87,491.49 C241.80,492.76 244.97,493.37 249.77,493.94 C254.86,493.40 258.23,492.78 261.23,491.49 C269.71,487.84 302.42,471.62 316.50,464.04 C325.90,458.76 337.37,451.62 342.76,447.48 C349.19,442.51 363.62,427.54 363.94,427.19 C366.35,424.49 370.58,419.10 372.13,416.27 C373.90,413.01 381.31,395.06 382.80,390.57 C386.48,379.41 394.00,343.25 397.26,326.95 C401.84,307.36 411.30,273.86 413.84,264.25 C416.01,255.36 419.42,238.75 420.45,231.55 C421.40,224.15 423.22,209.95 423.25,209.62 Z";
      case humanHeadType.halfSharp:
        return "M249.89,497.05 C253.36,496.83 253.83,496.75 255.16,496.17 C268.91,490.39 298.61,477.56 314.56,470.51 C321.70,467.19 338.76,459.05 344.81,455.38 C349.22,452.69 360.33,443.20 363.62,439.30 C367.85,434.20 370.59,426.73 373.30,417.04 C377.19,402.01 385.73,369.48 390.37,351.98 C399.59,319.84 412.82,273.09 416.10,259.90 C418.65,248.80 421.31,232.60 422.01,222.91 C422.85,212.36 425.24,179.30 424.68,167.73 C424.27,160.35 422.60,141.00 421.94,136.00 C420.87,128.10 417.85,113.37 415.35,105.65 C413.01,98.47 407.27,85.55 403.16,79.09 C398.75,72.19 389.12,60.93 383.82,55.66 C378.06,49.95 365.52,39.20 358.91,34.54 C351.88,29.61 338.63,22.34 330.67,19.08 C323.31,16.09 307.68,11.70 300.41,9.90 C281.42,5.73 267.84,5.28 250.46,5.28 C245.17,5.27 230.04,5.21 222.92,5.90 C215.38,6.65 201.04,9.54 192.30,11.70 C181.52,14.65 169.31,18.88 161.92,22.37 C154.65,25.83 141.12,34.35 134.64,39.38 C128.58,44.12 116.03,55.69 110.97,61.12 C105.33,67.21 96.59,79.14 93.06,85.65 C90.00,91.37 84.64,105.42 82.58,112.85 C80.86,119.09 78.19,134.69 77.16,144.06 C76.40,152.25 75.22,170.80 75.22,176.14 C75.31,186.92 77.94,222.69 78.40,228.50 C79.04,236.06 82.19,252.31 84.72,262.91 C88.18,276.27 97.10,307.46 101.84,323.71 C110.96,357.52 129.48,427.19 131.33,431.26 C133.60,436.18 140.45,443.83 146.52,449.04 C152.03,453.74 164.63,460.68 174.59,465.43 C190.79,472.65 231.39,490.71 235.64,492.94 C238.49,494.49 243.39,496.90 247.05,497.14 C247.36,497.16 248.30,497.13 249.89,497.05 Z";
      default:
        return "";
    }
  }

  const fillColor = props.item!.overrideSkinColor
    ? props.item!.skinColorHex
    : "#00000000"; // TODO Replace with general Skin color

  return (
    <Path
      data={getSvgPath()}
      stroke={GetHasBorderColor(props.item!)}
      strokeWidth={GetHasBorderThickness(props.item!, props.item!.scaleX)}
      fill={fillColor}
    />
  );
}
